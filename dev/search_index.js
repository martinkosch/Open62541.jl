var documenterSearchIndex = {"docs":
[{"location":"manual/numbertypes/#Supported-number-types","page":"Supported number types","title":"Supported number types","text":"","category":"section"},{"location":"manual/numbertypes/","page":"Supported number types","title":"Supported number types","text":"It is noteworthy that the open62541 library supports the following Julia number types natively. open62541.jl provides support for the same number types. Adding other types is possible, but must rely on a custom datatype. See the open62541 documentation.","category":"page"},{"location":"manual/numbertypes/","page":"Supported number types","title":"Supported number types","text":"Real:","category":"page"},{"location":"manual/numbertypes/","page":"Supported number types","title":"Supported number types","text":"Integers: Int8, Int16, Int32, Int64, UInt8, UInt16, UInt32, UInt64.\nFloat: Float32 and Float64.","category":"page"},{"location":"manual/numbertypes/","page":"Supported number types","title":"Supported number types","text":"Complex:","category":"page"},{"location":"manual/numbertypes/","page":"Supported number types","title":"Supported number types","text":"Complex{Float32}, Complex{Float64}","category":"page"},{"location":"manual/nodeid/#Nodeid","page":"Nodeid","title":"Nodeid","text":"","category":"section"},{"location":"manual/nodeid/","page":"Nodeid","title":"Nodeid","text":"This page lists docstrings of functions used to create NodeId identifiers.","category":"page"},{"location":"manual/nodeid/#Low-level-interface","page":"Nodeid","title":"Low level interface","text":"","category":"section"},{"location":"manual/nodeid/","page":"Nodeid","title":"Nodeid","text":"test","category":"page"},{"location":"manual/nodeid/","page":"Nodeid","title":"Nodeid","text":"UA_NODEID\nUA_NODEID_BYTESTRING_ALLOC\nUA_NODEID_GUID\nUA_NODEID_NUMERIC\nUA_NODEID_STRING\nUA_NODEID_STRING_ALLOC","category":"page"},{"location":"manual/nodeid/#open62541.UA_NODEID","page":"Nodeid","title":"open62541.UA_NODEID","text":"UA_NODEID(s::AbstractString)::Ptr{UA_NodeId}\nUA_NODEID(s::Ptr{UA_String})::Ptr{UA_NodeId}\n\ncreates a UA_NodeId object by parsing s.\n\nExample:\n\nUA_NODEID(\"ns=1;i=1234\") #generates UA_NodeId with numeric identifier\nUA_NODEID(\"ns=1;s=test\") #generates UA_NodeId with string identifier\n\n\n\n\n\n","category":"function"},{"location":"manual/nodeid/#open62541.UA_NODEID_BYTESTRING_ALLOC","page":"Nodeid","title":"open62541.UA_NODEID_BYTESTRING_ALLOC","text":"UA_NODEID_BYTESTRING_ALLOC(nsIndex::Integer, identifier::AbstractString)::Ptr{UA_NodeId}\nUA_NODEID_BYTESTRING_ALLOC(nsIndex::Integer, identifier::Ptr{UA_ByteString})::Ptr{UA_NodeId}\n\ncreates a UA_NodeId object with namespace index nsIndex and bytestring identifier identifier (which can be a string or UA_ByteString).\n\nMemory is allocated by C and needs to be cleaned up using UA_NodeId_delete(x::Ptr{UA_NodeId}) after the object is not used anymore.\n\n\n\n\n\n","category":"function"},{"location":"manual/nodeid/#open62541.UA_NODEID_GUID","page":"Nodeid","title":"open62541.UA_NODEID_GUID","text":"UA_NODEID_GUID(nsIndex::Integer, identifier::AbstractString)::Ptr{UA_NodeId}\nUA_NODEID_GUID(nsIndex::Integer, identifier::Ptr{UA_Guid})::Ptr{UA_NodeId}\n\ncreates a UA_NodeId object by with namespace index nsIndex and an identifier identifier based on a globally unique id (UA_Guid) that can be supplied as a string (which will be parsed) or as a valid Ptr{UA_Guid}.\n\nMemory is allocated by C and needs to be cleaned up using UA_NodeId_delete(x::Ptr{UA_NodeId}) after the object is not used anymore.\n\n\n\n\n\n","category":"function"},{"location":"manual/nodeid/#open62541.UA_NODEID_NUMERIC","page":"Nodeid","title":"open62541.UA_NODEID_NUMERIC","text":"UA_NODEID_NUMERIC(nsIndex::Integer, identifier::Integer)::Ptr{UA_NodeId}\n\ncreates a UA_NodeId object with namespace index nsIndex and numerical identifier identifier. Memory is allocated by C and needs to be cleaned up using UA_NodeId_delete(x::Ptr{UA_NodeId})  after the object is not used anymore.\n\n\n\n\n\n","category":"function"},{"location":"manual/nodeid/#open62541.UA_NODEID_STRING","page":"Nodeid","title":"open62541.UA_NODEID_STRING","text":"UA_NODEID_STRING(nsIndex::Integer, identifier::AbstractString)::Ptr{UA_NodeId}\nUA_NODEID_STRING(nsIndex::Integer, identifier::Ptr{UA_String})::Ptr{UA_NodeId}\n\ncreates a UA_NodeId object by with namespace index nsIndex and string identifier identifier.\n\nMemory is allocated by C and needs to be cleaned up using UA_NodeId_delete(x::Ptr{UA_NodeId}) after the object is not used anymore.\n\n\n\n\n\n","category":"function"},{"location":"manual/nodeid/#open62541.UA_NODEID_STRING_ALLOC","page":"Nodeid","title":"open62541.UA_NODEID_STRING_ALLOC","text":"UA_NODEID_STRING_ALLOC(nsIndex::Integer, identifier::AbstractString)::Ptr{UA_NodeId}\nUA_NODEID_STRING_ALLOC(nsIndex::Integer, identifier::Ptr{UA_String})::Ptr{UA_NodeId}\n\ncreates a UA_NodeId object with namespace index nsIndex and string identifier identifier.\n\nMemory is allocated by C and needs to be cleaned up using UA_NodeId_delete(x::Ptr{UA_NodeId}) after the object is not used anymore.\n\n\n\n\n\n","category":"function"},{"location":"manual/nodeid/#High-level-interface","page":"Nodeid","title":"High level interface","text":"","category":"section"},{"location":"manual/nodeid/","page":"Nodeid","title":"Nodeid","text":"JUA_NodeId","category":"page"},{"location":"manual/nodeid/#open62541.JUA_NodeId","page":"Nodeid","title":"open62541.JUA_NodeId","text":"JUA_NodeId\n\ncreates a JUA_NodeId object - the equivalent of a UA_NodeId, but with memory managed by Julia rather than C.\n\nThe following methods are defined:\n\nJUA_NodeId()\n\ncreates a JUA_NodeId with namespaceIndex = 0, numeric identifierType and identifier = 0\n\nJUA_NodeId(s::AbstractString)\n\ncreates a JUA_NodeId based on String s that is parsed into the relevant properties.\n\nJUA_NodeId(nsIndex::Integer, identifier::Integer)\n\ncreates a JUA_NodeId with namespace index nsIndex and numerical identifier identifier.\n\nJUA_NodeId(nsIndex::Integer, identifier::AbstractString)\n\ncreates a JUA_NodeId with namespace index nsIndex and string identifier identifier.\n\nJUA_NodeId(nsIndex::Integer, identifier::JUA_Guid)\n\ncreates a JUA_NodeId with namespace index nsIndex and global unique id identifier identifier.\n\nJUA_NodeId(nptr::Ptr{UA_NodeId})\n\ncreates a JUA_NodeId based on the pointer nptr. This is a fallback  method that can be used to pass UA_NodeIds generated via the low level interface  to the higher level functions. Note that memory management remains on the C side  when using this method, i.e., nptr needs to be manually cleaned up with  UA_NodeId_delete(nptr) after the object is not needed anymore. It is up  to the user to ensure this.\n\nExamples:\n\nj = JUA_NodeId()\nj = JUA_NodeId(\"ns=1;i=1234\")\nj = JUA_NodeId(\"ns=1;s=example\")\nj = JUA_NodeId(1, 1234)\nj = JUA_NodeId(1, \"example\")\nj = JUA_NodeId(1, JUA_Guid(\"C496578A-0DFE-4B8F-870A-745238C6AEAE\"))\n\n\n\n\n\n","category":"type"},{"location":"tutorials/client_first_steps/#First-steps-with-an-open62541-client","page":"First steps with an open62541 client","title":"First steps with an open62541 client","text":"","category":"section"},{"location":"tutorials/client_first_steps/","page":"First steps with an open62541 client","title":"First steps with an open62541 client","text":"In this tutorial we will connect an OPC client to the server started up in First steps with an open62541 server and read some basic information from it, namely the software version number and the current time. Note that this information should be contained in all OPC UA servers, so you could also connect to a different server that you know is running.","category":"page"},{"location":"tutorials/client_first_steps/","page":"First steps with an open62541 client","title":"First steps with an open62541 client","text":"using open62541\nusing Printf\n\n#initiate client, configure it and connect to server\nclient = JUA_Client()\nconfig = JUA_ClientConfig(client)\nJUA_ClientConfig_setDefault(config)\nJUA_Client_connect(client, \"opc.tcp://localhost:4840\")\n\n#define nodeids that we are interested in \nnodeid_currenttime = JUA_NodeId(0, UA_NS0ID_SERVER_SERVERSTATUS_CURRENTTIME)\nnodeid_version = JUA_NodeId(0, UA_NS0ID_SERVER_SERVERSTATUS_BUILDINFO_SOFTWAREVERSION)\n\n#read data from nodeids\ncurrenttime = JUA_Client_readValueAttribute(client, nodeid_currenttime) #Int64 which represents the number of 100 nanosecond intervals since January 1, 1601 (UTC)\nversion = JUA_Client_readValueAttribute(client, nodeid_version) #String containing open62541 version number\n\n#Convert current time into human understandable format\ndts = UA_DateTime_toStruct(currenttime)\n\n#Print results to terminal\nPrintf.@printf(\"current date and time (UTC) is: %u-%u-%u %u:%u:%u.%03u\\n\",\n    dts.day, dts.month, dts.year, dts.hour, dts.min, dts.sec, dts.milliSec)\nPrintf.@printf(\"The server is running open62541 version %s.\", version)\n\n#disconnect the client (good housekeeping practice)\nJUA_Client_disconnect(client)","category":"page"},{"location":"tutorials/server_first_steps/#First-steps-with-an-open62541-server","page":"First steps with an open62541 server","title":"First steps with an open62541 server","text":"","category":"section"},{"location":"tutorials/server_first_steps/","page":"First steps with an open62541 server","title":"First steps with an open62541 server","text":"Starting up a server with a default configuration in open62541.jl is very simple. Just execute the following code in the REPL or as a script:","category":"page"},{"location":"tutorials/server_first_steps/","page":"First steps with an open62541 server","title":"First steps with an open62541 server","text":"using open62541\nserver = JUA_Server()\nconfig = JUA_ServerConfig(server)\nJUA_ServerConfig_setDefault(config)\nJUA_Server_runUntilInterrupt(server)","category":"page"},{"location":"tutorials/server_first_steps/","page":"First steps with an open62541 server","title":"First steps with an open62541 server","text":"This will configure a server with the default configuration (address: opc.tcp://localhost:4840/) and start it. The server can be shut down by pressing CTRL+C multiple times.","category":"page"},{"location":"tutorials/server_first_steps/","page":"First steps with an open62541 server","title":"First steps with an open62541 server","text":"While the server is running, it can be accessed via the Client API of open62541.jl or it can be browsed and accessed with a graphical client, such as UA Expert.","category":"page"},{"location":"tutorials/server_first_steps/","page":"First steps with an open62541 server","title":"First steps with an open62541 server","text":"Subsequent tutorials will explain how to add your own variables, objects, and methods to the server.","category":"page"},{"location":"manual/server/#Server","page":"Server","title":"Server","text":"","category":"section"},{"location":"manual/server/","page":"Server","title":"Server","text":"This page lists docstrings relevant to the server API.","category":"page"},{"location":"manual/server/#Adding-different-types-of-nodes:","page":"Server","title":"Adding different types of nodes:","text":"","category":"section"},{"location":"manual/server/","page":"Server","title":"Server","text":"JUA_Server_addNode\nUA_Server_addVariableNode\nUA_Server_addObjectNode \nUA_Server_addVariableTypeNode\nUA_Server_addObjectTypeNode\nUA_Server_addViewNode\nUA_Server_addReferenceTypeNode\nUA_Server_addDataTypeNode\nUA_Server_addMethodNode","category":"page"},{"location":"manual/server/#open62541.JUA_Server_addNode","page":"Server","title":"open62541.JUA_Server_addNode","text":"JUA_Server_addNode(server::JUA_Server, requestedNewNodeId::JUA_NodeId,\n        parentNodeId::JUA_NodeId, referenceTypeId::JUA_NodeId, browseName::JUA_QualifiedName, \n        attributes::Union{JUA_VariableAttributes, JUA_VariableTypeAttributes, JUA_ObjectAttributes},\n        outNewNodeId::JUA_NodeId, nodeContext::JUA_NodeId, typeDefinition::JUA_NodeId)::UA_StatusCode\n\nuses the server API to add a Variable, VariableType, or Object node to the server.\n\nSee JUA_VariableAttributes, JUA_VariableTypeAttributes, and JUA_ObjectAttributes  on how to define valid attributes.\n\nJUA_Server_addNode(server::JUA_Server, requestedNewNodeId::JUA_NodeId,\n        parentNodeId, referenceTypeId::JUA_NodeId, browseName::JUA_QualifiedName,\n        attributes::Union{JUA_ObjectTypeAttributes, JUA_ReferenceTypeAttributes, JUA_DataTypeAttributes, JUA_ViewAttributes},\n        outNewNodeId::JUA_NodeId, nodeContext::JUA_NodeId)::UA_StatusCode\n\nuses the server API to add a ObjectType, ReferenceType, DataType, or View node to the server.\n\nSee JUA_ObjectTypeAttributes, See JUA_ReferenceTypeAttributes, JUA_DataTypeAttributes, and JUA_ViewAttributes on how to define valid attributes.\n\nTODO: Need to add docstring for method node addition once I have thought about the interface.\n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_addVariableNode","page":"Server","title":"open62541.UA_Server_addVariableNode","text":"UA_Server_addVariableNode(server::Ptr{UA_Server}, requestednewnodeid::Ptr{UA_NodeId}, \n        parentnodeid::Ptr{UA_NodeId}, referenceTypeId::Ptr{UA_NodeId}, \n        browseName::Ptr{UA_QualifiedName}, typedefinition::Ptr{UA_NodeId},\n        attr::Ptr{UA_VariableAttributes}, nodeContext::Ptr{UA_NodeId}, \n        outNewNodeId::Ptr{UA_NodeId})::UA_StatusCode\n\nuses the server API to add a variable node to the server.\n\nSee UA_VariableAttributes_generate on how to define valid attributes.\n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_addObjectNode","page":"Server","title":"open62541.UA_Server_addObjectNode","text":"UA_Server_addObjectNode(server::Ptr{UA_Server}, requestednewnodeid::Ptr{UA_NodeId}, \n        parentnodeid::Ptr{UA_NodeId}, referenceTypeId::Ptr{UA_NodeId}, \n        browseName::Ptr{UA_QualifiedName}, typedefinition::Ptr{UA_NodeId},\n        attr::Ptr{UA_ObjectAttributes}, nodeContext::Ptr{UA_NodeId}, \n        outNewNodeId::Ptr{UA_NodeId})::UA_StatusCode\n\nuses the server API to add a object node to the server.\n\nSee UA_ObjectAttributes_generate on how to define valid attributes.\n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_addVariableTypeNode","page":"Server","title":"open62541.UA_Server_addVariableTypeNode","text":"UA_Server_addVariableTypeNode(server::Ptr{UA_Server}, requestednewnodeid::Ptr{UA_NodeId}, \n        parentnodeid::Ptr{UA_NodeId}, referenceTypeId::Ptr{UA_NodeId}, \n        browseName::Ptr{UA_QualifiedName}, typedefinition::Ptr{UA_NodeId},\n        attr::Ptr{UA_VariableTypeAttributes}, nodeContext::Ptr{UA_NodeId}, \n        outNewNodeId::Ptr{UA_NodeId})::UA_StatusCode\n\nuses the server API to add a variabletype node to the server.\n\nSee UA_VariableTypeAttributes_generate on how to define valid attributes.\n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_addObjectTypeNode","page":"Server","title":"open62541.UA_Server_addObjectTypeNode","text":"UA_Server_addObjectTypeNode(server::Ptr{UA_Server}, requestednewnodeid::Ptr{UA_NodeId}, \n        parentnodeid::Ptr{UA_NodeId}, referenceTypeId::Ptr{UA_NodeId}, \n        browseName::Ptr{UA_QualifiedName}, typedefinition::Ptr{UA_NodeId},\n        attr::Ptr{UA_ObjectTypeAttributes}, nodeContext::Ptr{UA_NodeId}, \n        outNewNodeId::Ptr{UA_NodeId})::UA_StatusCode\n\nuses the server API to add a objecttype node to the server.\n\nSee UA_ObjectTypeAttributes_generate on how to define valid attributes.\n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_addViewNode","page":"Server","title":"open62541.UA_Server_addViewNode","text":"UA_Server_addViewNode(server::Ptr{UA_Server}, requestednewnodeid::Ptr{UA_NodeId}, \n        parentnodeid::Ptr{UA_NodeId}, referenceTypeId::Ptr{UA_NodeId}, \n        browseName::Ptr{UA_QualifiedName}, typedefinition::Ptr{UA_NodeId},\n        attr::Ptr{UA_ViewAttributes}, nodeContext::Ptr{UA_NodeId}, \n        outNewNodeId::Ptr{UA_NodeId})::UA_StatusCode\n\nuses the server API to add a view node to the server.\n\nSee UA_ViewAttributes_generate on how to define valid attributes.\n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_addReferenceTypeNode","page":"Server","title":"open62541.UA_Server_addReferenceTypeNode","text":"UA_Server_addReferenceTypeNode(server::Ptr{UA_Server}, requestednewnodeid::Ptr{UA_NodeId}, \n        parentnodeid::Ptr{UA_NodeId}, referenceTypeId::Ptr{UA_NodeId}, \n        browseName::Ptr{UA_QualifiedName}, typedefinition::Ptr{UA_NodeId},\n        attr::Ptr{UA_ReferenceTypeAttributes}, nodeContext::Ptr{UA_NodeId}, \n        outNewNodeId::Ptr{UA_NodeId})::UA_StatusCode\n\nuses the server API to add a referencetype node to the server.\n\nSee UA_ReferenceTypeAttributes_generate on how to define valid attributes.\n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_addDataTypeNode","page":"Server","title":"open62541.UA_Server_addDataTypeNode","text":"UA_Server_addDataTypeNode(server::Ptr{UA_Server}, requestednewnodeid::Ptr{UA_NodeId}, \n        parentnodeid::Ptr{UA_NodeId}, referenceTypeId::Ptr{UA_NodeId}, \n        browseName::Ptr{UA_QualifiedName}, typedefinition::Ptr{UA_NodeId},\n        attr::Ptr{UA_DataTypeAttributes}, nodeContext::Ptr{UA_NodeId}, \n        outNewNodeId::Ptr{UA_NodeId})::UA_StatusCode\n\nuses the server API to add a datatype node to the server.\n\nSee UA_DataTypeAttributes_generate on how to define valid attributes.\n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_addMethodNode","page":"Server","title":"open62541.UA_Server_addMethodNode","text":"UA_Server_addMethodNode(server::Ptr{UA_Server}, requestednewnodeid::Ptr{UA_NodeId}, \n        parentnodeid::Ptr{UA_NodeId}, referenceTypeId::Ptr{UA_NodeId}, \n        browseName::Ptr{UA_QualifiedName}, attr::Ptr{UA_MethodAttributes}, \n        method::Function, inputArgumentsSize::Csize_t, inputArguments::Union{UA_Argument, AbstractArray{UA_Argument}}, \n        outputArgumentsSize::Csize_t, outputArguments::Union{UA_Argument, AbstractArray{UA_Argument}}, \n        nodeContext::Ptr{UA_NodeId}, outNewNodeId::Ptr{UA_NodeId})::UA_StatusCode\n\nuses the server API to add a method node with the callback method to the server. UA_MethodCallback_generate is internally called on the method supplied and thus its function signature must match its requirements.\n\nSee UA_MethodAttributes_generate on how to define valid attributes.\n\n\n\n\n\n","category":"function"},{"location":"manual/server/#Reading-from-nodes:","page":"Server","title":"Reading from nodes:","text":"","category":"section"},{"location":"manual/server/","page":"Server","title":"Server","text":"UA_Server_readAccessLevel\nUA_Server_readArrayDimensions\nUA_Server_readBrowseName\nUA_Server_readContainsNoLoops\nUA_Server_readDataType\nUA_Server_readDescription\nUA_Server_readDisplayName\nUA_Server_readEventNotifier\nUA_Server_readExecutable\nUA_Server_readHistorizing\nUA_Server_readInverseName\nUA_Server_readIsAbstract\nUA_Server_readMinimumSamplingInterval\nUA_Server_readNodeClass\nUA_Server_readNodeId\nUA_Server_readSymmetric\nUA_Server_readValue\nUA_Server_readValueRank\nUA_Server_readWriteMask","category":"page"},{"location":"manual/server/#open62541.UA_Server_readAccessLevel","page":"Server","title":"open62541.UA_Server_readAccessLevel","text":"UA_Server_readAccessLevel(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_Byte})\n\nUses the Server API to read the value of the attribute AccessLevel  from the NodeId nodeId located on server server. The result is saved  into out.\n\nNote that memory for out must be allocated by C before using this function.  This can be accomplished with out = UA_Byte_new(). The  resulting object must be cleaned up via UA_Byte_delete(out::Ptr{UA_Byte})     after its use.\n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_readArrayDimensions","page":"Server","title":"open62541.UA_Server_readArrayDimensions","text":"UA_Server_readArrayDimensions(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_Variant})\n\nUses the Server API to read the value of the attribute ArrayDimensions  from the NodeId nodeId located on server server. The result is saved  into out.\n\nNote that memory for out must be allocated by C before using this function.  This can be accomplished with out = UA_Variant_new(). The  resulting object must be cleaned up via UA_Variant_delete(out::Ptr{UA_Variant})     after its use.\n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_readBrowseName","page":"Server","title":"open62541.UA_Server_readBrowseName","text":"UA_Server_readBrowseName(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_QualifiedName})\n\nUses the Server API to read the value of the attribute BrowseName  from the NodeId nodeId located on server server. The result is saved  into out.\n\nNote that memory for out must be allocated by C before using this function.  This can be accomplished with out = UA_QualifiedName_new(). The  resulting object must be cleaned up via UA_QualifiedName_delete(out::Ptr{UA_QualifiedName})     after its use.\n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_readContainsNoLoops","page":"Server","title":"open62541.UA_Server_readContainsNoLoops","text":"UA_Server_readContainsNoLoops(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_Boolean})\n\nUses the Server API to read the value of the attribute ContainsNoLoops  from the NodeId nodeId located on server server. The result is saved  into out.\n\nNote that memory for out must be allocated by C before using this function.  This can be accomplished with out = UA_Boolean_new(). The  resulting object must be cleaned up via UA_Boolean_delete(out::Ptr{UA_Boolean})     after its use.\n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_readDataType","page":"Server","title":"open62541.UA_Server_readDataType","text":"UA_Server_readDataType(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_NodeId})\n\nUses the Server API to read the value of the attribute DataType  from the NodeId nodeId located on server server. The result is saved  into out.\n\nNote that memory for out must be allocated by C before using this function.  This can be accomplished with out = UA_NodeId_new(). The  resulting object must be cleaned up via UA_NodeId_delete(out::Ptr{UA_NodeId})     after its use.\n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_readDescription","page":"Server","title":"open62541.UA_Server_readDescription","text":"UA_Server_readDescription(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_LocalizedText})\n\nUses the Server API to read the value of the attribute Description  from the NodeId nodeId located on server server. The result is saved  into out.\n\nNote that memory for out must be allocated by C before using this function.  This can be accomplished with out = UA_LocalizedText_new(). The  resulting object must be cleaned up via UA_LocalizedText_delete(out::Ptr{UA_LocalizedText})     after its use.\n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_readDisplayName","page":"Server","title":"open62541.UA_Server_readDisplayName","text":"UA_Server_readDisplayName(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_LocalizedText})\n\nUses the Server API to read the value of the attribute DisplayName  from the NodeId nodeId located on server server. The result is saved  into out.\n\nNote that memory for out must be allocated by C before using this function.  This can be accomplished with out = UA_LocalizedText_new(). The  resulting object must be cleaned up via UA_LocalizedText_delete(out::Ptr{UA_LocalizedText})     after its use.\n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_readEventNotifier","page":"Server","title":"open62541.UA_Server_readEventNotifier","text":"UA_Server_readEventNotifier(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_Byte})\n\nUses the Server API to read the value of the attribute EventNotifier  from the NodeId nodeId located on server server. The result is saved  into out.\n\nNote that memory for out must be allocated by C before using this function.  This can be accomplished with out = UA_Byte_new(). The  resulting object must be cleaned up via UA_Byte_delete(out::Ptr{UA_Byte})     after its use.\n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_readExecutable","page":"Server","title":"open62541.UA_Server_readExecutable","text":"UA_Server_readExecutable(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_Boolean})\n\nUses the Server API to read the value of the attribute Executable  from the NodeId nodeId located on server server. The result is saved  into out.\n\nNote that memory for out must be allocated by C before using this function.  This can be accomplished with out = UA_Boolean_new(). The  resulting object must be cleaned up via UA_Boolean_delete(out::Ptr{UA_Boolean})     after its use.\n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_readHistorizing","page":"Server","title":"open62541.UA_Server_readHistorizing","text":"UA_Server_readHistorizing(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_Boolean})\n\nUses the Server API to read the value of the attribute Historizing  from the NodeId nodeId located on server server. The result is saved  into out.\n\nNote that memory for out must be allocated by C before using this function.  This can be accomplished with out = UA_Boolean_new(). The  resulting object must be cleaned up via UA_Boolean_delete(out::Ptr{UA_Boolean})     after its use.\n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_readInverseName","page":"Server","title":"open62541.UA_Server_readInverseName","text":"UA_Server_readInverseName(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_LocalizedText})\n\nUses the Server API to read the value of the attribute InverseName  from the NodeId nodeId located on server server. The result is saved  into out.\n\nNote that memory for out must be allocated by C before using this function.  This can be accomplished with out = UA_LocalizedText_new(). The  resulting object must be cleaned up via UA_LocalizedText_delete(out::Ptr{UA_LocalizedText})     after its use.\n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_readIsAbstract","page":"Server","title":"open62541.UA_Server_readIsAbstract","text":"UA_Server_readIsAbstract(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_Boolean})\n\nUses the Server API to read the value of the attribute IsAbstract  from the NodeId nodeId located on server server. The result is saved  into out.\n\nNote that memory for out must be allocated by C before using this function.  This can be accomplished with out = UA_Boolean_new(). The  resulting object must be cleaned up via UA_Boolean_delete(out::Ptr{UA_Boolean})     after its use.\n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_readMinimumSamplingInterval","page":"Server","title":"open62541.UA_Server_readMinimumSamplingInterval","text":"UA_Server_readMinimumSamplingInterval(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_Double})\n\nUses the Server API to read the value of the attribute MinimumSamplingInterval  from the NodeId nodeId located on server server. The result is saved  into out.\n\nNote that memory for out must be allocated by C before using this function.  This can be accomplished with out = UA_Double_new(). The  resulting object must be cleaned up via UA_Double_delete(out::Ptr{UA_Double})     after its use.\n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_readNodeClass","page":"Server","title":"open62541.UA_Server_readNodeClass","text":"UA_Server_readNodeClass(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_NodeClass})\n\nUses the Server API to read the value of the attribute NodeClass  from the NodeId nodeId located on server server. The result is saved  into out.\n\nNote that memory for out must be allocated by C before using this function.  This can be accomplished with out = UA_NodeClass_new(). The  resulting object must be cleaned up via UA_NodeClass_delete(out::Ptr{UA_NodeClass})     after its use.\n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_readNodeId","page":"Server","title":"open62541.UA_Server_readNodeId","text":"UA_Server_readNodeId(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_NodeId})\n\nUses the Server API to read the value of the attribute NodeId  from the NodeId nodeId located on server server. The result is saved  into out.\n\nNote that memory for out must be allocated by C before using this function.  This can be accomplished with out = UA_NodeId_new(). The  resulting object must be cleaned up via UA_NodeId_delete(out::Ptr{UA_NodeId})     after its use.\n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_readSymmetric","page":"Server","title":"open62541.UA_Server_readSymmetric","text":"UA_Server_readSymmetric(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_Boolean})\n\nUses the Server API to read the value of the attribute Symmetric  from the NodeId nodeId located on server server. The result is saved  into out.\n\nNote that memory for out must be allocated by C before using this function.  This can be accomplished with out = UA_Boolean_new(). The  resulting object must be cleaned up via UA_Boolean_delete(out::Ptr{UA_Boolean})     after its use.\n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_readValue","page":"Server","title":"open62541.UA_Server_readValue","text":"UA_Server_readValue(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_Variant})\n\nUses the Server API to read the value of the attribute Value  from the NodeId nodeId located on server server. The result is saved  into out.\n\nNote that memory for out must be allocated by C before using this function.  This can be accomplished with out = UA_Variant_new(). The  resulting object must be cleaned up via UA_Variant_delete(out::Ptr{UA_Variant})     after its use.\n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_readValueRank","page":"Server","title":"open62541.UA_Server_readValueRank","text":"UA_Server_readValueRank(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_Int32})\n\nUses the Server API to read the value of the attribute ValueRank  from the NodeId nodeId located on server server. The result is saved  into out.\n\nNote that memory for out must be allocated by C before using this function.  This can be accomplished with out = UA_Int32_new(). The  resulting object must be cleaned up via UA_Int32_delete(out::Ptr{UA_Int32})     after its use.\n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_readWriteMask","page":"Server","title":"open62541.UA_Server_readWriteMask","text":"UA_Server_readWriteMask(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_UInt32})\n\nUses the Server API to read the value of the attribute WriteMask  from the NodeId nodeId located on server server. The result is saved  into out.\n\nNote that memory for out must be allocated by C before using this function.  This can be accomplished with out = UA_UInt32_new(). The  resulting object must be cleaned up via UA_UInt32_delete(out::Ptr{UA_UInt32})     after its use.\n\n\n\n\n\n","category":"function"},{"location":"manual/server/#Writing-to-nodes:","page":"Server","title":"Writing to nodes:","text":"","category":"section"},{"location":"manual/server/","page":"Server","title":"Server","text":"UA_Server_writeAccessLevel\nUA_Server_writeArrayDimensions\nUA_Server_writeBrowseName\nUA_Server_writeDataType\nUA_Server_writeDataValue\nUA_Server_writeDescription\nUA_Server_writeDisplayName\nUA_Server_writeEventNotifier\nUA_Server_writeExecutable\nUA_Server_writeHistorizing\nUA_Server_writeInverseName\nUA_Server_writeIsAbstract\nUA_Server_writeMinimumSamplingInterval\nUA_Server_writeValue\nUA_Server_writeValueRank\nUA_Server_writeWriteMask","category":"page"},{"location":"manual/server/#open62541.UA_Server_writeAccessLevel","page":"Server","title":"open62541.UA_Server_writeAccessLevel","text":"UA_Server_writeAccessLevel(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_Byte})\n\nUses the Server API to write the value new_val to the attribute AccessLevel  of the NodeId nodeId located on the server. \n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_writeArrayDimensions","page":"Server","title":"open62541.UA_Server_writeArrayDimensions","text":"UA_Server_writeArrayDimensions(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_Variant})\n\nUses the Server API to write the value new_val to the attribute ArrayDimensions  of the NodeId nodeId located on the server. \n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_writeBrowseName","page":"Server","title":"open62541.UA_Server_writeBrowseName","text":"UA_Server_writeBrowseName(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_QualifiedName})\n\nUses the Server API to write the value new_val to the attribute BrowseName  of the NodeId nodeId located on the server. \n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_writeDataType","page":"Server","title":"open62541.UA_Server_writeDataType","text":"UA_Server_writeDataType(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_NodeId})\n\nUses the Server API to write the value new_val to the attribute DataType  of the NodeId nodeId located on the server. \n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_writeDataValue","page":"Server","title":"open62541.UA_Server_writeDataValue","text":"UA_Server_writeDataValue(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_DataValue})\n\nUses the Server API to write the value new_val to the attribute DataValue  of the NodeId nodeId located on the server. \n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_writeDescription","page":"Server","title":"open62541.UA_Server_writeDescription","text":"UA_Server_writeDescription(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_LocalizedText})\n\nUses the Server API to write the value new_val to the attribute Description  of the NodeId nodeId located on the server. \n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_writeDisplayName","page":"Server","title":"open62541.UA_Server_writeDisplayName","text":"UA_Server_writeDisplayName(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_LocalizedText})\n\nUses the Server API to write the value new_val to the attribute DisplayName  of the NodeId nodeId located on the server. \n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_writeEventNotifier","page":"Server","title":"open62541.UA_Server_writeEventNotifier","text":"UA_Server_writeEventNotifier(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_Byte})\n\nUses the Server API to write the value new_val to the attribute EventNotifier  of the NodeId nodeId located on the server. \n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_writeExecutable","page":"Server","title":"open62541.UA_Server_writeExecutable","text":"UA_Server_writeExecutable(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_Boolean})\n\nUses the Server API to write the value new_val to the attribute Executable  of the NodeId nodeId located on the server. \n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_writeHistorizing","page":"Server","title":"open62541.UA_Server_writeHistorizing","text":"UA_Server_writeHistorizing(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_Boolean})\n\nUses the Server API to write the value new_val to the attribute Historizing  of the NodeId nodeId located on the server. \n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_writeInverseName","page":"Server","title":"open62541.UA_Server_writeInverseName","text":"UA_Server_writeInverseName(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_LocalizedText})\n\nUses the Server API to write the value new_val to the attribute InverseName  of the NodeId nodeId located on the server. \n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_writeIsAbstract","page":"Server","title":"open62541.UA_Server_writeIsAbstract","text":"UA_Server_writeIsAbstract(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_Boolean})\n\nUses the Server API to write the value new_val to the attribute IsAbstract  of the NodeId nodeId located on the server. \n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_writeMinimumSamplingInterval","page":"Server","title":"open62541.UA_Server_writeMinimumSamplingInterval","text":"UA_Server_writeMinimumSamplingInterval(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_Double})\n\nUses the Server API to write the value new_val to the attribute MinimumSamplingInterval  of the NodeId nodeId located on the server. \n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_writeValue","page":"Server","title":"open62541.UA_Server_writeValue","text":"UA_Server_writeValue(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_Variant})\n\nUses the Server API to write the value new_val to the attribute Value  of the NodeId nodeId located on the server. \n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_writeValueRank","page":"Server","title":"open62541.UA_Server_writeValueRank","text":"UA_Server_writeValueRank(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_Int32})\n\nUses the Server API to write the value new_val to the attribute ValueRank  of the NodeId nodeId located on the server. \n\n\n\n\n\n","category":"function"},{"location":"manual/server/#open62541.UA_Server_writeWriteMask","page":"Server","title":"open62541.UA_Server_writeWriteMask","text":"UA_Server_writeWriteMask(server::Ptr{UA_Server}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_UInt32})\n\nUses the Server API to write the value new_val to the attribute WriteMask  of the NodeId nodeId located on the server. \n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = open62541","category":"page"},{"location":"#open62541.jl","page":"Home","title":"open62541.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for open62541.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"<!– @autodocs Modules = [open62541] –>","category":"page"},{"location":"manual/client/#Client","page":"Client","title":"Client","text":"","category":"section"},{"location":"manual/client/","page":"Client","title":"Client","text":"This page lists docstrings relevant to the client API.","category":"page"},{"location":"manual/client/#Adding-different-types-of-nodes:","page":"Client","title":"Adding different types of nodes:","text":"","category":"section"},{"location":"manual/client/","page":"Client","title":"Client","text":"JUA_Client_addNode\nUA_Client_addVariableNode\nUA_Client_addObjectNode \nUA_Client_addVariableTypeNode\nUA_Client_addObjectTypeNode\nUA_Client_addViewNode\nUA_Client_addReferenceTypeNode\nUA_Client_addDataTypeNode","category":"page"},{"location":"manual/client/#open62541.JUA_Client_addNode","page":"Client","title":"open62541.JUA_Client_addNode","text":"JUA_Client_addNode(client::JUA_Client, requestedNewNodeId::JUA_NodeId,\n        parentNodeId::JUA_NodeId, referenceTypeId::JUA_NodeId, browseName::JUA_QualifiedName, \n        attributes::Union{JUA_VariableAttributes, JUA_VariableTypeAttributes, JUA_ObjectAttributes},\n        outNewNodeId::JUA_NodeId, typeDefinition::JUA_NodeId)::UA_StatusCode\n\nuses the client API to add a Variable, VariableType, or Object node to the server  to which the client is connected to.\n\nSee JUA_VariableAttributes, JUA_VariableTypeAttributes, and JUA_ObjectAttributes  on how to define valid attributes.\n\nJUA_Client_addNode(client::JUA_Client, requestedNewNodeId::JUA_NodeId,\n        parentNodeId, referenceTypeId::JUA_NodeId, browseName::JUA_QualifiedName,\n        attributes::Union{JUA_ObjectTypeAttributes, JUA_ReferenceTypeAttributes, JUA_DataTypeAttributes, JUA_ViewAttributes},\n        outNewNodeId::JUA_NodeId)::UA_StatusCode\n\nuses the client API to add a ObjectType, ReferenceType, DataType or View node  to the server to which the client is connected to.\n\nSee JUA_ObjectTypeAttributes, See JUA_ReferenceTypeAttributes, JUA_DataTypeAttributes, and JUA_ViewAttributes on how to define valid attributes.\n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_addVariableNode","page":"Client","title":"open62541.UA_Client_addVariableNode","text":"UA_Client_addVariableNode(::Ptr{UA_Client}, requestednewnodeid::Ptr{UA_NodeId}, \n        parentnodeid::Ptr{UA_NodeId}, referenceTypeId::Ptr{UA_NodeId}, \n        browseName::Ptr{UA_QualifiedName}, typedefinition::Ptr{UA_NodeId},\n        attr::Ptr{UA_VariableAttributes}, outNewNodeId::Ptr{UA_NodeId})::UA_StatusCode\n\nuses the client API to add a variable  node to the client.\n\nSee UA_VariableAttributes_generate on how to define valid  attributes.\n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_addObjectNode","page":"Client","title":"open62541.UA_Client_addObjectNode","text":"UA_Client_addObjectNode(::Ptr{UA_Client}, requestednewnodeid::Ptr{UA_NodeId}, \n        parentnodeid::Ptr{UA_NodeId}, referenceTypeId::Ptr{UA_NodeId}, \n        browseName::Ptr{UA_QualifiedName}, typedefinition::Ptr{UA_NodeId},\n        attr::Ptr{UA_ObjectAttributes}, outNewNodeId::Ptr{UA_NodeId})::UA_StatusCode\n\nuses the client API to add a object  node to the client.\n\nSee UA_ObjectAttributes_generate on how to define valid  attributes.\n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_addVariableTypeNode","page":"Client","title":"open62541.UA_Client_addVariableTypeNode","text":"UA_Client_addVariableTypeNode(::Ptr{UA_Client}, requestednewnodeid::Ptr{UA_NodeId}, \n        parentnodeid::Ptr{UA_NodeId}, referenceTypeId::Ptr{UA_NodeId}, \n        browseName::Ptr{UA_QualifiedName}, attr::Ptr{UA_VariableTypeAttributes}, \n        outNewNodeId::Ptr{UA_NodeId})::UA_StatusCode\n\nuses the client API to add a variabletype  node to the client.\n\nSee UA_VariableTypeAttributes_generate on how to define valid  attributes.\n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_addObjectTypeNode","page":"Client","title":"open62541.UA_Client_addObjectTypeNode","text":"UA_Client_addObjectTypeNode(::Ptr{UA_Client}, requestednewnodeid::Ptr{UA_NodeId}, \n        parentnodeid::Ptr{UA_NodeId}, referenceTypeId::Ptr{UA_NodeId}, \n        browseName::Ptr{UA_QualifiedName}, attr::Ptr{UA_ObjectTypeAttributes}, \n        outNewNodeId::Ptr{UA_NodeId})::UA_StatusCode\n\nuses the client API to add a objecttype  node to the client.\n\nSee UA_ObjectTypeAttributes_generate on how to define valid  attributes.\n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_addViewNode","page":"Client","title":"open62541.UA_Client_addViewNode","text":"UA_Client_addViewNode(::Ptr{UA_Client}, requestednewnodeid::Ptr{UA_NodeId}, \n        parentnodeid::Ptr{UA_NodeId}, referenceTypeId::Ptr{UA_NodeId}, \n        browseName::Ptr{UA_QualifiedName}, attr::Ptr{UA_ViewAttributes}, \n        outNewNodeId::Ptr{UA_NodeId})::UA_StatusCode\n\nuses the client API to add a view  node to the client.\n\nSee UA_ViewAttributes_generate on how to define valid  attributes.\n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_addReferenceTypeNode","page":"Client","title":"open62541.UA_Client_addReferenceTypeNode","text":"UA_Client_addReferenceTypeNode(::Ptr{UA_Client}, requestednewnodeid::Ptr{UA_NodeId}, \n        parentnodeid::Ptr{UA_NodeId}, referenceTypeId::Ptr{UA_NodeId}, \n        browseName::Ptr{UA_QualifiedName}, attr::Ptr{UA_ReferenceTypeAttributes}, \n        outNewNodeId::Ptr{UA_NodeId})::UA_StatusCode\n\nuses the client API to add a referencetype  node to the client.\n\nSee UA_ReferenceTypeAttributes_generate on how to define valid  attributes.\n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_addDataTypeNode","page":"Client","title":"open62541.UA_Client_addDataTypeNode","text":"UA_Client_addDataTypeNode(::Ptr{UA_Client}, requestednewnodeid::Ptr{UA_NodeId}, \n        parentnodeid::Ptr{UA_NodeId}, referenceTypeId::Ptr{UA_NodeId}, \n        browseName::Ptr{UA_QualifiedName}, attr::Ptr{UA_DataTypeAttributes}, \n        outNewNodeId::Ptr{UA_NodeId})::UA_StatusCode\n\nuses the client API to add a datatype  node to the client.\n\nSee UA_DataTypeAttributes_generate on how to define valid  attributes.\n\n\n\n\n\n","category":"function"},{"location":"manual/client/#Reading-from-nodes:","page":"Client","title":"Reading from nodes:","text":"","category":"section"},{"location":"manual/client/","page":"Client","title":"Client","text":"UA_Client_readAccessLevelAttribute\nUA_Client_readBrowseNameAttribute\nUA_Client_readContainsNoLoopsAttribute\nUA_Client_readDataTypeAttribute\nUA_Client_readDescriptionAttribute\nUA_Client_readDisplayNameAttribute\nUA_Client_readEventNotifierAttribute\nUA_Client_readExecutableAttribute\nUA_Client_readHistorizingAttribute\nUA_Client_readInverseNameAttribute\nUA_Client_readIsAbstractAttribute\nUA_Client_readMinimumSamplingIntervalAttribute\nUA_Client_readNodeClassAttribute\nUA_Client_readNodeIdAttribute\nUA_Client_readSymmetricAttribute\nUA_Client_readUserAccessLevelAttribute\nUA_Client_readUserExecutableAttribute\nUA_Client_readUserWriteMaskAttribute\nUA_Client_readValueAttribute\nUA_Client_readValueRankAttribute\nUA_Client_readWriteMaskAttribute","category":"page"},{"location":"manual/client/#open62541.UA_Client_readAccessLevelAttribute","page":"Client","title":"open62541.UA_Client_readAccessLevelAttribute","text":"UA_Client_readAccessLevelAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_Byte})\n\nUses the UA Client API to read the value of attribute AccessLevel from the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_readBrowseNameAttribute","page":"Client","title":"open62541.UA_Client_readBrowseNameAttribute","text":"UA_Client_readBrowseNameAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_QualifiedName})\n\nUses the UA Client API to read the value of attribute BrowseName from the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_readContainsNoLoopsAttribute","page":"Client","title":"open62541.UA_Client_readContainsNoLoopsAttribute","text":"UA_Client_readContainsNoLoopsAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_Boolean})\n\nUses the UA Client API to read the value of attribute ContainsNoLoops from the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_readDataTypeAttribute","page":"Client","title":"open62541.UA_Client_readDataTypeAttribute","text":"UA_Client_readDataTypeAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_NodeId})\n\nUses the UA Client API to read the value of attribute DataType from the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_readDescriptionAttribute","page":"Client","title":"open62541.UA_Client_readDescriptionAttribute","text":"UA_Client_readDescriptionAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_LocalizedText})\n\nUses the UA Client API to read the value of attribute Description from the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_readDisplayNameAttribute","page":"Client","title":"open62541.UA_Client_readDisplayNameAttribute","text":"UA_Client_readDisplayNameAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_LocalizedText})\n\nUses the UA Client API to read the value of attribute DisplayName from the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_readEventNotifierAttribute","page":"Client","title":"open62541.UA_Client_readEventNotifierAttribute","text":"UA_Client_readEventNotifierAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_Byte})\n\nUses the UA Client API to read the value of attribute EventNotifier from the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_readExecutableAttribute","page":"Client","title":"open62541.UA_Client_readExecutableAttribute","text":"UA_Client_readExecutableAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_Boolean})\n\nUses the UA Client API to read the value of attribute Executable from the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_readHistorizingAttribute","page":"Client","title":"open62541.UA_Client_readHistorizingAttribute","text":"UA_Client_readHistorizingAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_Boolean})\n\nUses the UA Client API to read the value of attribute Historizing from the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_readInverseNameAttribute","page":"Client","title":"open62541.UA_Client_readInverseNameAttribute","text":"UA_Client_readInverseNameAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_LocalizedText})\n\nUses the UA Client API to read the value of attribute InverseName from the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_readIsAbstractAttribute","page":"Client","title":"open62541.UA_Client_readIsAbstractAttribute","text":"UA_Client_readIsAbstractAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_Boolean})\n\nUses the UA Client API to read the value of attribute IsAbstract from the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_readMinimumSamplingIntervalAttribute","page":"Client","title":"open62541.UA_Client_readMinimumSamplingIntervalAttribute","text":"UA_Client_readMinimumSamplingIntervalAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_Double})\n\nUses the UA Client API to read the value of attribute MinimumSamplingInterval from the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_readNodeClassAttribute","page":"Client","title":"open62541.UA_Client_readNodeClassAttribute","text":"UA_Client_readNodeClassAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_NodeClass})\n\nUses the UA Client API to read the value of attribute NodeClass from the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_readNodeIdAttribute","page":"Client","title":"open62541.UA_Client_readNodeIdAttribute","text":"UA_Client_readNodeIdAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_NodeId})\n\nUses the UA Client API to read the value of attribute NodeId from the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_readSymmetricAttribute","page":"Client","title":"open62541.UA_Client_readSymmetricAttribute","text":"UA_Client_readSymmetricAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_Boolean})\n\nUses the UA Client API to read the value of attribute Symmetric from the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_readUserAccessLevelAttribute","page":"Client","title":"open62541.UA_Client_readUserAccessLevelAttribute","text":"UA_Client_readUserAccessLevelAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_Byte})\n\nUses the UA Client API to read the value of attribute UserAccessLevel from the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_readUserExecutableAttribute","page":"Client","title":"open62541.UA_Client_readUserExecutableAttribute","text":"UA_Client_readUserExecutableAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_Boolean})\n\nUses the UA Client API to read the value of attribute UserExecutable from the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_readUserWriteMaskAttribute","page":"Client","title":"open62541.UA_Client_readUserWriteMaskAttribute","text":"UA_Client_readUserWriteMaskAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_UInt32})\n\nUses the UA Client API to read the value of attribute UserWriteMask from the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_readValueAttribute","page":"Client","title":"open62541.UA_Client_readValueAttribute","text":"UA_Client_readValueAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_Variant})\n\nUses the UA Client API to read the value of attribute Value from the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_readValueRankAttribute","page":"Client","title":"open62541.UA_Client_readValueRankAttribute","text":"UA_Client_readValueRankAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_Int32})\n\nUses the UA Client API to read the value of attribute ValueRank from the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_readWriteMaskAttribute","page":"Client","title":"open62541.UA_Client_readWriteMaskAttribute","text":"UA_Client_readWriteMaskAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, out::Ptr{UA_UInt32})\n\nUses the UA Client API to read the value of attribute WriteMask from the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#Writing-to-nodes:","page":"Client","title":"Writing to nodes:","text":"","category":"section"},{"location":"manual/client/","page":"Client","title":"Client","text":"UA_Client_writeAccessLevelAttribute\nUA_Client_writeBrowseNameAttribute\nUA_Client_writeContainsNoLoopsAttribute\nUA_Client_writeDataTypeAttribute\nUA_Client_writeDescriptionAttribute\nUA_Client_writeDisplayNameAttribute\nUA_Client_writeEventNotifierAttribute\nUA_Client_writeExecutableAttribute\nUA_Client_writeHistorizingAttribute\nUA_Client_writeInverseNameAttribute\nUA_Client_writeIsAbstractAttribute\nUA_Client_writeMinimumSamplingIntervalAttribute\nUA_Client_writeNodeClassAttribute\nUA_Client_writeNodeIdAttribute\nUA_Client_writeSymmetricAttribute\nUA_Client_writeUserAccessLevelAttribute\nUA_Client_writeUserExecutableAttribute\nUA_Client_writeUserWriteMaskAttribute\nUA_Client_writeValueAttribute\nUA_Client_writeValueRankAttribute\nUA_Client_writeWriteMaskAttribute","category":"page"},{"location":"manual/client/#open62541.UA_Client_writeAccessLevelAttribute","page":"Client","title":"open62541.UA_Client_writeAccessLevelAttribute","text":"UA_Client_writeAccessLevelAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_Byte})\n\nUses the UA Client API to write the value new_val to the attribute AccessLevel of the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_writeBrowseNameAttribute","page":"Client","title":"open62541.UA_Client_writeBrowseNameAttribute","text":"UA_Client_writeBrowseNameAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_QualifiedName})\n\nUses the UA Client API to write the value new_val to the attribute BrowseName of the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_writeContainsNoLoopsAttribute","page":"Client","title":"open62541.UA_Client_writeContainsNoLoopsAttribute","text":"UA_Client_writeContainsNoLoopsAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_Boolean})\n\nUses the UA Client API to write the value new_val to the attribute ContainsNoLoops of the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_writeDataTypeAttribute","page":"Client","title":"open62541.UA_Client_writeDataTypeAttribute","text":"UA_Client_writeDataTypeAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_NodeId})\n\nUses the UA Client API to write the value new_val to the attribute DataType of the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_writeDescriptionAttribute","page":"Client","title":"open62541.UA_Client_writeDescriptionAttribute","text":"UA_Client_writeDescriptionAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_LocalizedText})\n\nUses the UA Client API to write the value new_val to the attribute Description of the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_writeDisplayNameAttribute","page":"Client","title":"open62541.UA_Client_writeDisplayNameAttribute","text":"UA_Client_writeDisplayNameAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_LocalizedText})\n\nUses the UA Client API to write the value new_val to the attribute DisplayName of the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_writeEventNotifierAttribute","page":"Client","title":"open62541.UA_Client_writeEventNotifierAttribute","text":"UA_Client_writeEventNotifierAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_Byte})\n\nUses the UA Client API to write the value new_val to the attribute EventNotifier of the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_writeExecutableAttribute","page":"Client","title":"open62541.UA_Client_writeExecutableAttribute","text":"UA_Client_writeExecutableAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_Boolean})\n\nUses the UA Client API to write the value new_val to the attribute Executable of the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_writeHistorizingAttribute","page":"Client","title":"open62541.UA_Client_writeHistorizingAttribute","text":"UA_Client_writeHistorizingAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_Boolean})\n\nUses the UA Client API to write the value new_val to the attribute Historizing of the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_writeInverseNameAttribute","page":"Client","title":"open62541.UA_Client_writeInverseNameAttribute","text":"UA_Client_writeInverseNameAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_LocalizedText})\n\nUses the UA Client API to write the value new_val to the attribute InverseName of the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_writeIsAbstractAttribute","page":"Client","title":"open62541.UA_Client_writeIsAbstractAttribute","text":"UA_Client_writeIsAbstractAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_Boolean})\n\nUses the UA Client API to write the value new_val to the attribute IsAbstract of the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_writeMinimumSamplingIntervalAttribute","page":"Client","title":"open62541.UA_Client_writeMinimumSamplingIntervalAttribute","text":"UA_Client_writeMinimumSamplingIntervalAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_Double})\n\nUses the UA Client API to write the value new_val to the attribute MinimumSamplingInterval of the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_writeNodeClassAttribute","page":"Client","title":"open62541.UA_Client_writeNodeClassAttribute","text":"UA_Client_writeNodeClassAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_NodeClass})\n\nUses the UA Client API to write the value new_val to the attribute NodeClass of the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_writeNodeIdAttribute","page":"Client","title":"open62541.UA_Client_writeNodeIdAttribute","text":"UA_Client_writeNodeIdAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_NodeId})\n\nUses the UA Client API to write the value new_val to the attribute NodeId of the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_writeSymmetricAttribute","page":"Client","title":"open62541.UA_Client_writeSymmetricAttribute","text":"UA_Client_writeSymmetricAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_Boolean})\n\nUses the UA Client API to write the value new_val to the attribute Symmetric of the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_writeUserAccessLevelAttribute","page":"Client","title":"open62541.UA_Client_writeUserAccessLevelAttribute","text":"UA_Client_writeUserAccessLevelAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_Byte})\n\nUses the UA Client API to write the value new_val to the attribute UserAccessLevel of the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_writeUserExecutableAttribute","page":"Client","title":"open62541.UA_Client_writeUserExecutableAttribute","text":"UA_Client_writeUserExecutableAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_Boolean})\n\nUses the UA Client API to write the value new_val to the attribute UserExecutable of the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_writeUserWriteMaskAttribute","page":"Client","title":"open62541.UA_Client_writeUserWriteMaskAttribute","text":"UA_Client_writeUserWriteMaskAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_UInt32})\n\nUses the UA Client API to write the value new_val to the attribute UserWriteMask of the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_writeValueAttribute","page":"Client","title":"open62541.UA_Client_writeValueAttribute","text":"UA_Client_writeValueAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_Variant})\n\nUses the UA Client API to write the value new_val to the attribute Value of the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_writeValueRankAttribute","page":"Client","title":"open62541.UA_Client_writeValueRankAttribute","text":"UA_Client_writeValueRankAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_Int32})\n\nUses the UA Client API to write the value new_val to the attribute ValueRank of the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/client/#open62541.UA_Client_writeWriteMaskAttribute","page":"Client","title":"open62541.UA_Client_writeWriteMaskAttribute","text":"UA_Client_writeWriteMaskAttribute(client::Ptr{UA_Client}, nodeId::Ptr{UA_NodeId}, new_val::Ptr{UA_UInt32})\n\nUses the UA Client API to write the value new_val to the attribute WriteMask of the NodeId nodeId accessed through the client client. \n\n\n\n\n\n","category":"function"},{"location":"manual/attributegeneration/#Attribute-generation","page":"Attribute generation","title":"Attribute generation","text":"","category":"section"},{"location":"manual/attributegeneration/","page":"Attribute generation","title":"Attribute generation","text":"This page lists docstrings of functions used for the convenient generation of  node attribute structures. Their main use is when adding nodes to a server through  client API (see JUA_Client_addNode) or the server API (see JUA_Server_addNode).","category":"page"},{"location":"manual/attributegeneration/","page":"Attribute generation","title":"Attribute generation","text":"Convenience functions that allow setting values for specific attributes:","category":"page"},{"location":"manual/attributegeneration/","page":"Attribute generation","title":"Attribute generation","text":"UA_VALUERANK\nUA_ACCESSLEVEL\nUA_USERACCESSLEVEL\nUA_WRITEMASK\nUA_USERWRITEMASK\nUA_EVENTNOTIFIER","category":"page"},{"location":"manual/attributegeneration/#open62541.UA_VALUERANK","page":"Attribute generation","title":"open62541.UA_VALUERANK","text":"UA_VALUERANK(N::Integer)::Integer\n\nreturns the valuerank based on the dimensionality of an array N. For special cases see here: Unified Automation Website\n\n\n\n\n\n","category":"function"},{"location":"manual/attributegeneration/#open62541.UA_ACCESSLEVEL","page":"Attribute generation","title":"open62541.UA_ACCESSLEVEL","text":"UA_ACCESSLEVEL(; read = false, write = false, historyread = false, \n        historywrite = false, semanticchange = false, statuswrite = false, \n        timestampwrite = false)::UInt8\n\ncalculates a UInt8 number expressing how the value of a variable can be accessed. Default is to disallow all operations. The meaning of the keywords is explained here: OPC Foundation Website\n\n\n\n\n\n","category":"function"},{"location":"manual/attributegeneration/#open62541.UA_USERACCESSLEVEL","page":"Attribute generation","title":"open62541.UA_USERACCESSLEVEL","text":"UA_USERACCESSLEVEL(; read = false, write = false, historyread = false, \n        historywrite = false, semanticchange = false, statuswrite = false, \n        timestampwrite = false)::UInt8\n\ncalculates a UInt8 number expressing how the value of a variable can be accessed. Default is to disallow all operations. The meaning of the keywords is explained here: OPC Foundation Website\n\n\n\n\n\n","category":"function"},{"location":"manual/attributegeneration/#open62541.UA_WRITEMASK","page":"Attribute generation","title":"open62541.UA_WRITEMASK","text":"UA_WRITEMASK(; accesslevel = false, arraydimensions = false,\n        browsename = false, containsnoloops = false, datatype = false,\n        description = false, displayname = false, eventnotifier = false,\n        executable = false, historizing = false, inversename = false,\n        isabstract = false, minimumsamplinginterval = false, nodeclass = false,\n        nodeid = false, symmetric = false, useraccesslevel = false, \n        userexecutable = false, userwritemask = false, valuerank = false,\n        writemask = false, valueforvariabletype = false)::UInt32\n\ncalculates a UInt32 number expressing which attributes of a node are writeable. The meaning of the keywords is explained here: https://reference.opcfoundation.org/Core/Part3/v105/docs/8.60\n\nIf the specific node type does not support an attribute, the corresponding keyword must be set to false. This is currently not enforced automatically.\n\n\n\n\n\n","category":"function"},{"location":"manual/attributegeneration/#open62541.UA_USERWRITEMASK","page":"Attribute generation","title":"open62541.UA_USERWRITEMASK","text":"UA_USERWRITEMASK(; accesslevel = false, arraydimensions = false,\n        browsename = false, containsnoloops = false, datatype = false,\n        description = false, displayname = false, eventnotifier = false,\n        executable = false, historizing = false, inversename = false,\n        isabstract = false, minimumsamplinginterval = false, nodeclass = false,\n        nodeid = false, symmetric = false, useraccesslevel = false, \n        userexecutable = false, userwritemask = false, valuerank = false,\n        writemask = false, valueforvariabletype = false)::UInt32\n\ncalculates a UInt32 number expressing which attributes of a node are writeable. The meaning of the keywords is explained here: OPC Foundation Website\n\nIf the specific node type does not support an attribute, the corresponding keyword must be set to false. This is currently not enforced automatically.\n\n\n\n\n\n","category":"function"},{"location":"manual/attributegeneration/#open62541.UA_EVENTNOTIFIER","page":"Attribute generation","title":"open62541.UA_EVENTNOTIFIER","text":"UA_EVENTNOTIFIER(; subscribetoevent = false, historyread = false, \n        historywrite = false)::UInt8\n\ncalculates a UInt8 number expressing whether a node can be used to subscribe to events and/or read/write historic events.\n\nMeaning of keywords is explained here: OPC Foundation Website\n\n\n\n\n\n","category":"function"},{"location":"manual/attributegeneration/","page":"Attribute generation","title":"Attribute generation","text":"High level generators for attribute blocks:","category":"page"},{"location":"manual/attributegeneration/","page":"Attribute generation","title":"Attribute generation","text":"JUA_VariableAttributes\nJUA_VariableTypeAttributes\nJUA_ObjectAttributes\nJUA_ObjectTypeAttributes\nJUA_MethodAttributes\nJUA_ViewAttributes\nJUA_DataTypeAttributes\nJUA_ReferenceTypeAttributes","category":"page"},{"location":"manual/attributegeneration/#open62541.JUA_VariableAttributes","page":"Attribute generation","title":"open62541.JUA_VariableAttributes","text":"JUA_VariableAttributes\n\nA mutable struct that defines a JUA_VariableAttributes object - the equivalent  of a UA_VariableAttributes, but with memory managed by Julia rather than C (see  below for exceptions) \n\nThe following constructor methods are defined:\n\nJUA_VariableAttributes(; kwargs...)\n\nFor valid keyword arguments kwargs see UA_VariableAttributes_generate.\n\nJUA_VariableAttributes(ptr:Ptr{UA_VariableAttributes})\n\ncreates a JUA_VariableAttributes based on the pointer ptr. This is a  fallback method that can be used to pass UA_VariableAttributess generated via  the low level interface to the higher level functions. See also UA_VariableAttributes_generate.\n\nNote that memory management remains on the C side when using this method, i.e.,  ptr needs to be manually cleaned up with UA_VariableAttributes_delete(ptr)  after the object is not needed anymore. It is up to the user to ensure this.\n\n\n\n\n\n","category":"type"},{"location":"manual/attributegeneration/#open62541.JUA_VariableTypeAttributes","page":"Attribute generation","title":"open62541.JUA_VariableTypeAttributes","text":"JUA_VariableTypeAttributes\n\nA mutable struct that defines a JUA_VariableTypeAttributes object - the equivalent  of a UA_VariableTypeAttributes, but with memory managed by Julia rather than C (see  below for exceptions) \n\nThe following constructor methods are defined:\n\nJUA_VariableTypeAttributes(; kwargs...)\n\nFor valid keyword arguments kwargs see UA_VariableTypeAttributes_generate.\n\nJUA_VariableTypeAttributes(ptr::Ptr{UA_VariableTypeAttributes})\n\ncreates a JUA_VariableTypeAttributes based on the pointer ptr.  This is a fallback method that can be used to pass UA_VariableAttributess  generated via the low level interface to the higher level functions. See also UA_VariableAttributes_generate.\n\nNote that memory management remains on the C side when using this method, i.e.,  ptr needs to be manually cleaned up with UA_VariableTypeAttributes_delete(ptr)   after the object is not needed anymore. It is up to the user to ensure this.\n\n\n\n\n\n","category":"type"},{"location":"manual/attributegeneration/#open62541.JUA_ObjectAttributes","page":"Attribute generation","title":"open62541.JUA_ObjectAttributes","text":"JUA_ObjectAttributes\n\nA mutable struct that defines a JUA_ObjectAttributes object - the equivalent  of a UA_ObjectAttributes, but with memory managed by Julia rather than C (see  below for exceptions) \n\nThe following constructor methods are defined:\n\nJUA_ObjectAttributes(; kwargs...)\n\nFor valid keyword arguments kwargs see UA_ObjectAttributes_generate.\n\nJUA_ObjectAttributes(ptr::Ptr{UA_ObjectAttributes})\n\ncreates a JUA_ObjectAttributes based on the pointer objattrptr.  This is a fallback method that can be used to pass UA_ObjectAttributess  generated via the low level interface to the higher level functions. See also UA_ObjectAttributes_generate.\n\nNote that memory management remains on the C side when using this method, i.e.,  ptr needs to be manually cleaned up with UA_ObjectAttributes_delete(ptr)  after the object is not needed anymore. It is up to the user to ensure this.\n\n\n\n\n\n","category":"type"},{"location":"manual/attributegeneration/#open62541.JUA_ObjectTypeAttributes","page":"Attribute generation","title":"open62541.JUA_ObjectTypeAttributes","text":"JUA_ObjectTypeAttributes\n\nA mutable struct that defines a JUA_ObjectTypeAttributes object - the equivalent  of a UA_ObjectTypeAttributes, but with memory managed by Julia rather than C (see  below for exceptions) \n\nThe following constructor methods are defined:\n\nJUA_ObjectTypeAttributes(; kwargs...)\n\nFor valid keyword arguments kwargs see UA_ObjectTypeAttributes_generate.\n\nJUA_ObjectTypeAttributes(ptr::Ptr{UA_ObjectTypeAttributes})\n\ncreates a JUA_ObjectTypeAttributes based on the pointer ptr. This is a  fallback method that can be used to pass UA_ObjectTypeAttributess generated via  the low level interface to the higher level functions. See also UA_ObjectTypeAttributes_generate.\n\nNote that memory management remains on the C side when using this method, i.e.,  ptr needs to be manually cleaned up with UA_ObjectTypeAttributes_delete(ptr)  after the object is not needed anymore. It is up to the user to ensure this.\n\n\n\n\n\n","category":"type"},{"location":"manual/attributegeneration/#open62541.JUA_MethodAttributes","page":"Attribute generation","title":"open62541.JUA_MethodAttributes","text":"JUA_MethodAttributes\n\nA mutable struct that defines a JUA_MethodAttributes object - the equivalent  of a UA_MethodAttributes, but with memory managed by Julia rather than C (see  below for exceptions) \n\nThe following constructor methods are defined:\n\nJUA_MethodAttributes(; kwargs...)\n\nFor valid keyword arguments kwargs see UA_MethodAttributes_generate.\n\nJUA_MethodAttributes(ptr::Ptr{UA_MethodAttributes})\n\ncreates a JUA_MethodAttributes based on the pointer ptr.  This is a fallback method that can be used to pass UA_MethodAttributess  generated via the low level interface to the higher level functions. See also UA_MethodAttributes_generate.\n\nNote that memory management remains on the C side when using this method, i.e.,  ptr needs to be manually cleaned up with UA_MethodAttributes_delete(ptr)  after the object is not needed anymore. It is up to the user to ensure this.\n\n\n\n\n\n","category":"type"},{"location":"manual/attributegeneration/#open62541.JUA_ViewAttributes","page":"Attribute generation","title":"open62541.JUA_ViewAttributes","text":"JUA_ViewAttributes\n\nA mutable struct that defines a JUA_ViewAttributes object - the equivalent  of a UA_ViewAttributes, but with memory managed by Julia rather than C (see  below for exceptions) \n\nThe following constructor methods are defined:\n\nJUA_ViewAttributes(; kwargs...)\n\nFor valid keyword arguments kwargs see UA_ViewAttributes_generate.\n\nJUA_ViewAttributes(ptr::Ptr{UA_ViewAttributes})\n\ncreates a JUA_ViewAttributes based on the pointer ptr.  This is a fallback method that can be used to pass UA_VariableAttributess  generated via the low level interface to the higher level functions. See also UA_VariableAttributes_generate.\n\nNote that memory management remains on the C side when using this method, i.e.,  ptr needs to be manually cleaned up with UA_ViewAttributes_delete(ptr) after  the object is not needed anymore. It is up to the user to ensure this.\n\n\n\n\n\n","category":"type"},{"location":"manual/attributegeneration/#open62541.JUA_DataTypeAttributes","page":"Attribute generation","title":"open62541.JUA_DataTypeAttributes","text":"JUA_DataTypeAttributes\n\nA mutable struct that defines a JUA_DataTypeAttributes object - the equivalent  of a UA_DataTypeAttributes, but with memory managed by Julia rather than C (see  below for exceptions) \n\nThe following constructor methods are defined:\n\nJUA_DataTypeAttributes(; kwargs...)\n\nFor valid keyword arguments kwargs see UA_DataTypeAttributes_generate.\n\nJUA_DataTypeAttributes(ptr::Ptr{UA_DataTypeAttributes})\n\ncreates a JUA_DataTypeAttributes based on the pointer ptr.  This is a fallback method that can be used to pass UA_VariableAttributess  generated via the low level interface to the higher level functions. See also UA_VariableAttributes_generate.\n\nNote that memory management remains on the C side when using this method, i.e.,  ptr needs to be manually cleaned up with  UA_DataTypeAttributes_delete(ptr)  after the object is not  needed anymore. It is up to the user to ensure this.\n\n\n\n\n\n","category":"type"},{"location":"manual/attributegeneration/#open62541.JUA_ReferenceTypeAttributes","page":"Attribute generation","title":"open62541.JUA_ReferenceTypeAttributes","text":"JUA_ReferenceTypeAttributes\n\nA mutable struct that defines a JUA_ReferenceTypeAttributes object - the equivalent  of a UA_ReferenceTypeAttributes, but with memory managed by Julia rather than C (see  below for exceptions) \n\nThe following constructor methods are defined:\n\nJUA_ReferenceTypeAttributes(; kwargs...)\n\nFor valid keyword arguments kwargs see UA_ReferenceTypeAttributes_generate.\n\nJUA_ReferenceTypeAttributes(ptr::Ptr{UA_ReferenceTypeAttributes})\n\ncreates a JUA_ReferenceTypeAttributes based on the pointer ptr.  This is a fallback method that can be used to pass UA_ReferenceTypeAttributess  generated via the low level interface to the higher level functions. See also UA_ReferenceTypeAttributes_generate.\n\nNote that memory management remains on the C side when using this method, i.e.,  ptr needs to be manually cleaned up with  UA_ReferenceTypeAttributes_delete(ptr)  after the object is not  needed anymore. It is up to the user to ensure this.\n\n\n\n\n\n","category":"type"},{"location":"manual/attributegeneration/","page":"Attribute generation","title":"Attribute generation","text":"Lower level generators for attribute blocks:","category":"page"},{"location":"manual/attributegeneration/","page":"Attribute generation","title":"Attribute generation","text":"UA_VariableAttributes_generate\nUA_VariableTypeAttributes_generate\nUA_ObjectAttributes_generate\nUA_ObjectTypeAttributes_generate\nUA_MethodAttributes_generate\nUA_ViewAttributes_generate\nUA_DataTypeAttributes_generate\nUA_ReferenceTypeAttributes_generate","category":"page"},{"location":"manual/attributegeneration/#open62541.UA_VariableAttributes_generate","page":"Attribute generation","title":"open62541.UA_VariableAttributes_generate","text":"UA_VariableAttributes_generate(; value::Union{AbstractArray{T}, T},\n    displayname::AbstractString, description::AbstractString,\n    localization::AbstractString = \"en-US\",\n    writemask::Union{Nothing, UInt32} = nothing,\n    userwritemask::Union{Nothing, UInt32} = nothing,\n    accesslevel::Union{Nothing, UInt8} = nothing,\n    useraccesslevel::Union{Nothing, UInt8} = nothing,\n    minimumsamplinginterval::Union{Nothing, Float64} = nothing,\n    historizing::Union{Nothing, Bool} = nothing,\n    valuerank::Union{Integer, Nothing} = nothing)::Ptr{UA_VariableAttributes} where {T <: Union{AbstractFloat, Integer, AbstractString}}\n\ngenerates a UA_VariableAttributes object. Memory for the object is allocated by C and needs to be cleaned up by calling UA_VariableAttributes_delete(x) after usage.\n\nFor keywords given as nothing, the respective default value is used, see UA_VariableAttributes_default[]. If nothing is given for keyword valuerank, then it is either set to UA_VALUERANK_SCALAR (if value is a scalar), or to the dimensionality of the supplied array (i.e., N for an AbstractArray{T,N}).\n\nSee also UA_WRITEMASK, UA_USERWRITEMASK, UA_ACCESSLEVEL, and UA_USERACCESSLEVEL for information on how to generate the respective keyword inputs.\n\n\n\n\n\n","category":"function"},{"location":"manual/attributegeneration/#open62541.UA_VariableTypeAttributes_generate","page":"Attribute generation","title":"open62541.UA_VariableTypeAttributes_generate","text":"UA_VariableTypeAttributes_generate(; value::Union{Nothing, AbstractArray{T}, T} = nothing,\n    displayname::AbstractString, description::AbstractString,\n    localization::AbstractString = \"en-US\",\n    writemask::Union{Nothing, UInt32} = nothing,\n    userwritemask::Union{Nothing, UInt32} = nothing,\n    valuerank::Union{Nothing, Integer} = nothing,\n    isabstract::Union{Nothing, Bool})::Ptr{UA_VariableTypeAttributes} where {T <: Union{AbstractFloat, Integer, AbstractString}}\n\ngenerates a UA_VariableTypeAttributes object. Memory for the object is allocated by C and needs to be cleaned up by calling UA_VariableTypeAttributes_delete(x) after usage.\n\nFor keywords given as nothing, the respective default value is used, see UA_VariableTypeAttributes_default[]. If a default value is specified for the variabletype and nothing is given for keyword valuerank, then it is either set to UA_VALUERANK_SCALAR (if value is a scalar), or to the dimensionality of the supplied array (i.e., N for an AbstractArray{T,N}).\n\nSee also UA_WRITEMASK, UA_USERWRITEMASK for information on how to generate the respective keyword inputs.\n\n\n\n\n\n","category":"function"},{"location":"manual/attributegeneration/#open62541.UA_ObjectAttributes_generate","page":"Attribute generation","title":"open62541.UA_ObjectAttributes_generate","text":"UA_ObjectAttributes_generate(; displayname::AbstractString,\n    description::AbstractString, localization::AbstractString = \"en-US\",\n    writemask::Union{Nothing, UInt32} = nothing,\n    userwritemask::Union{Nothing, UInt32} = nothing,\n    eventnotifier::Union{Nothing, UInt8} = nothing)::Ptr{UA_ObjectAttributes}\n\ngenerates a UA_ObjectAttributes object. Memory for the object is allocated by C and needs to be cleaned up by calling UA_ObjectAttributes_delete(x) after usage.\n\nFor keywords given as nothing, the respective default value is used, see UA_ObjectAttributes_default[]\n\nSee also UA_WRITEMASK, UA_USERWRITEMASK, UA_EVENTNOTIFIER for information on how to generate the respective keyword inputs.\n\n\n\n\n\n","category":"function"},{"location":"manual/attributegeneration/#open62541.UA_ObjectTypeAttributes_generate","page":"Attribute generation","title":"open62541.UA_ObjectTypeAttributes_generate","text":"UA_ObjectTypeAttributes_generate(; displayname::AbstractString,\n    description::AbstractString, localization::AbstractString = \"en-US\",\n    writemask::Union{Nothing, UInt32} = nothing,\n    userwritemask::Union{Nothing, UInt32} = nothing,\n    isabstract::Union{Nothing, Bool} = nothing)::Ptr{UA_ObjectTypeAttributes}\n\ngenerates a UA_ObjectTypeAttributes object. Memory for the object is allocated by C and needs to be cleaned up by calling UA_ObjectTypeAttributes_delete(x) after usage.\n\nFor keywords given as nothing, the respective default value is used, see UA_ObjectTypeAttributes_default[]\n\nSee also UA_WRITEMASK and UA_USERWRITEMASK for information on how to generate the respective keyword inputs.\n\n\n\n\n\n","category":"function"},{"location":"manual/attributegeneration/#open62541.UA_MethodAttributes_generate","page":"Attribute generation","title":"open62541.UA_MethodAttributes_generate","text":"UA_MethodAttributes_generate(; displayname::AbstractString,\n    description::AbstractString, localization::AbstractString = \"en-US\",\n    writemask::Union{Nothing, UInt32} = nothing,\n    userwritemask::Union{Nothing, UInt32} = nothing,\n    executable::Union{Nothing, Bool} = nothing,\n    userexecutable::Union{Nothing, Bool} = nothing)::Ptr{UA_MethodAttributes}\n\ngenerates a UA_MethodAttributes object. Memory for the object is allocated by C and needs to be cleaned up by calling UA_MethodAttributes_delete(x) after usage.\n\nFor keywords given as nothing, the respective default value is used, see UA_MethodAttributes_default[]\n\nSee also UA_WRITEMASK and UA_USERWRITEMASK for information on how to generate the respective keyword inputs.\n\n\n\n\n\n","category":"function"},{"location":"manual/attributegeneration/#open62541.UA_ViewAttributes_generate","page":"Attribute generation","title":"open62541.UA_ViewAttributes_generate","text":"UA_ViewAttributes_generate(; displayname::AbstractString,\n    description::AbstractString, localization::AbstractString = \"en-US\",\n    writemask::Union{Nothing, UInt32} = nothing,\n    userwritemask::Union{Nothing, UInt32} = nothing,\n    containsnoloops::Union{Nothing, Bool} = nothing,\n    eventnotifier::Union{Nothing, UInt8} = nothing)::Ptr{UA_ViewAttributes}\n\ngenerates a UA_ViewAttributes object. Memory for the object is allocated by C and needs to be cleaned up by calling UA_ViewAttributes_delete(x) after usage.\n\nFor keywords given as nothing, the respective default value is used, see UA_ViewAttributes_default[]\n\nSee also UA_WRITEMASK, UA_USERWRITEMASK and UA_EVENTNOTIFIER for information on how to generate the respective keyword inputs.\n\n\n\n\n\n","category":"function"},{"location":"manual/attributegeneration/#open62541.UA_DataTypeAttributes_generate","page":"Attribute generation","title":"open62541.UA_DataTypeAttributes_generate","text":"UA_DataTypeAttributes_generate(; displayname::AbstractString,\n    description::AbstractString, localization::AbstractString = \"en-US\",\n    writemask::Union{Nothing, UInt32} = nothing,\n    userwritemask::Union{Nothing, UInt32} = nothing,\n    isabstract::Union{Nothing, Bool} = nothing)::Ptr{UA_DataTypeAttributes}\n\ngenerates a UA_DataTypeAttributes object. Memory for the object is allocated by C and needs to be cleaned up by calling UA_DataTypeAttributes_delete(x) after usage.\n\nFor keywords given as nothing, the respective default value is used, see UA_DataTypeAttributes_default[]\n\nSee also UA_WRITEMASK and UA_USERWRITEMASK for information on how to generate the respective keyword inputs.\n\n\n\n\n\n","category":"function"},{"location":"manual/attributegeneration/#open62541.UA_ReferenceTypeAttributes_generate","page":"Attribute generation","title":"open62541.UA_ReferenceTypeAttributes_generate","text":"UA_ReferenceTypeAttributes_generate(; displayname::AbstractString,\n    description::AbstractString, localization::AbstractString = \"en-US\",\n    writemask::Union{Nothing, UInt32} = nothing,\n    userwritemask::Union{Nothing, UInt32} = nothing,\n    isabstract::Union{Nothing, Bool} = nothing\n    symmetric::Union{Nothing, Bool} = nothing,\n    inversename::Union{Nothing, AbstractString} = nothing)::Ptr{UA_ReferenceTypeAttributes}\n\ngenerates a UA_ReferenceTypeAttributes object. Memory for the object is allocated by C and needs to be cleaned up by calling UA_ReferenceTypeAttributes_delete(x) after usage.\n\nFor keywords given as nothing, the respective default value is used, see UA_ReferenceTypeAttributes_default[]\n\nSee also UA_WRITEMASK and UA_USERWRITEMASK for information on how to generate the respective keyword inputs.\n\n\n\n\n\n","category":"function"}]
}
